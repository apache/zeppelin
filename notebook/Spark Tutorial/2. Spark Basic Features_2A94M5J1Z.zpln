{
  "paragraphs": [
    {
      "text": "%md\n## Welcome to Zeppelin.\n##### This is a live tutorial, you can run the code yourself. (Shift-Enter to Run)",
      "user": "anonymous",
      "dateUpdated": "2021-07-26 04:36:10.172",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "tableHide": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWelcome to Zeppelin.\u003c/h2\u003e\n\u003ch5\u003eThis is a live tutorial, you can run the code yourself. (Shift-Enter to Run)\u003c/h5\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1423836981412_-1007008116",
      "id": "20150213-231621_168813393",
      "dateCreated": "2015-02-13 23:16:21.000",
      "dateStarted": "2021-07-26 04:36:10.174",
      "dateFinished": "2021-07-26 04:36:10.184",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Spark Basic Features: From Data Loading to SQL Analysis\n\nThis tutorial guides you through the fundamental features of Apache Spark within Zeppelin. We will cover an end-to-end data analysis workflow:\n\n1.  **Loading Data**: Two primary methods will be demonstrated - the modern DataFrame API and the foundational RDD API.\n2.  **Data Analysis with SQL**: We will perform practical data analysis, starting from basic aggregations and filtering, and progressing to creating a readable report using a `JOIN` operation.\n3.  **Visualization**: You\u0027ll learn how to instantly visualize your results using Zeppelin\u0027s built-in charting tools.\n\nLet\u0027s begin by loading our sample dataset.",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:02:09.135",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eSpark Basic Features: From Data Loading to SQL Analysis\u003c/h3\u003e\n\u003cp\u003eThis tutorial guides you through the fundamental features of Apache Spark within Zeppelin. We will cover an end-to-end data analysis workflow:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eLoading Data\u003c/strong\u003e: Two primary methods will be demonstrated - the modern DataFrame API and the foundational RDD API.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData Analysis with SQL\u003c/strong\u003e: We will perform practical data analysis, starting from basic aggregations and filtering, and progressing to creating a readable report using a \u003ccode\u003eJOIN\u003c/code\u003e operation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVisualization\u003c/strong\u003e: You\u0026rsquo;ll learn how to instantly visualize your results using Zeppelin\u0026rsquo;s built-in charting tools.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet\u0026rsquo;s begin by loading our sample dataset.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754139723363_1041380302",
      "id": "paragraph_1754139723363_1041380302",
      "dateCreated": "2025-08-02 22:02:03.365",
      "dateStarted": "2025-08-02 22:02:09.135",
      "dateFinished": "2025-08-02 22:02:09.188",
      "status": "FINISHED"
    },
    {
      "title": "Step 1-1: Load Data with the DataFrame API (Recommended)",
      "text": "// Zeppelin automatically creates a \u0027spark\u0027 (SparkSession) object.\n// This is the main entry point for the DataFrame API.\n\n// Load bank data from a remote URL\nval url \u003d \"https://raw.githubusercontent.com/apache/zeppelin/master/testing/resources/bank.csv\"\nval csvLines \u003d scala.io.Source.fromURL(url).getLines().toSeq\n\n// Create a temporary view from the loaded data using the DataFrame API\nval csvDataset \u003d spark.createDataset(csvLines)\nval bankDF \u003d spark.read\n                    .option(\"header\", \"true\")\n                    .option(\"inferSchema\", \"true\")\n                    .option(\"sep\", \";\")\n                    .csv(csvDataset)\n\nbankDF.createOrReplaceTempView(\"bank\")\n\n// While the DataFrame API is the standard for most use cases, it\u0027s beneficial to understand the lower-level RDD API. \n// The following example shows how to perform the same data loading task by manually parsing the file, \n// giving you more fine-grained control if ever needed.",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:02:23.358",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "title": true,
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34murl\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d https://raw.githubusercontent.com/apache/zeppelin/master/testing/resources/bank.csv\n\u001b[1m\u001b[34mcsvLines\u001b[0m: \u001b[1m\u001b[32mSeq[String]\u001b[0m \u003d Stream(\"age\";\"job\";\"marital\";\"education\";\"default\";\"balance\";\"housing\";\"loan\";\"contact\";\"day\";\"month\";\"duration\";\"campaign\";\"pdays\";\"previous\";\"poutcome\";\"y\", 30;\"unemployed\";\"married\";\"primary\";\"no\";1787;\"no\";\"no\";\"cellular\";19;\"oct\";79;1;-1;0;\"unknown\";\"no\", 33;\"services\";\"married\";\"secondary\";\"no\";4789;\"yes\";\"yes\";\"cellular\";11;\"may\";220;1;339;4;\"failure\";\"no\", 35;\"management\";\"single\";\"tertiary\";\"no\";1350;\"yes\";\"no\";\"cellular\";16;\"apr\";185;1;330;1;\"failure\";\"no\", 30;\"management\";\"married\";\"tertiary\";\"no\";1476;\"yes\";\"yes\";\"unknown\";3;\"jun\";199;4;-1;0;\"unknown\";\"no\", 59;\"blue-collar\";\"married\";\"secondary\";\"no\";0;\"...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d9"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1423500779206_-1502780787",
      "id": "20150210-015259_1403135953",
      "dateCreated": "2015-02-10 01:52:59.000",
      "dateStarted": "2025-08-02 22:02:23.378",
      "dateFinished": "2025-08-02 22:02:24.725",
      "status": "FINISHED"
    },
    {
      "title": "Step 1-2: Load Data with the RDD API (For Deeper Understanding)",
      "text": "// This shows how to load data using the low-level RDD API,\n// which involves manually parsing each line and then converting it to a DataFrame.\ncase class Bank(age: Integer, job: String, marital: String, balance: Integer, loan: String)\n\nval bankTextRdd \u003d spark.sparkContext.parallelize(csvLines.tail)\nval bankRddAsDF \u003d bankTextRdd.map(line \u003d\u003e line.split(\";\")).map(\n    arr \u003d\u003e Bank(\n        arr(0).toInt,\n        arr(1).replaceAll(\"\\\"\", \"\"),\n        arr(2).replaceAll(\"\\\"\", \"\"),\n        arr(5).replaceAll(\"\\\"\", \"\").toInt,\n        arr(7).replaceAll(\"\\\"\", \"\")\n    )\n).toDF()\n\nbankRddAsDF.createOrReplaceTempView(\"bank\")",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:22:11.575",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class Bank\n\u001b[1m\u001b[34mbankTextRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[String]\u001b[0m \u003d ParallelCollectionRDD[77] at parallelize at \u003cconsole\u003e:35\n\u001b[1m\u001b[34mbankRddAsDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [age: int, job: string ... 3 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754139872381_460225196",
      "id": "paragraph_1754139872381_460225196",
      "dateCreated": "2025-08-02 22:04:32.396",
      "dateStarted": "2025-08-02 22:22:11.588",
      "dateFinished": "2025-08-02 22:22:12.202",
      "status": "FINISHED"
    },
    {
      "title": "Step 2: Initial Exploration: Customer Age Distribution",
      "text": "%sql\n\nSELECT\n    age,\n    count(1) as value\nfrom bank\ngroup by age\norder by age",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:25:41.709",
      "progress": 100,
      "config": {
        "colWidth": 4.0,
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "forceY": false,
                  "lineWithFocus": false,
                  "isDateFormat": false,
                  "dateFormat": ""
                }
              },
              "keys": [
                {
                  "name": "age",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "value",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "age\tvalue\n19\t4\n20\t3\n21\t7\n22\t9\n23\t20\n24\t24\n25\t44\n26\t77\n27\t94\n28\t103\n29\t97\n30\t150\n31\t199\n32\t224\n33\t186\n34\t231\n35\t180\n36\t188\n37\t161\n38\t159\n39\t130\n40\t142\n41\t135\n42\t141\n43\t115\n44\t105\n45\t112\n46\t119\n47\t108\n48\t114\n49\t112\n50\t101\n51\t91\n52\t86\n53\t94\n54\t71\n55\t90\n56\t74\n57\t91\n58\t85\n59\t71\n60\t47\n61\t16\n62\t7\n63\t8\n64\t7\n65\t6\n66\t9\n67\t5\n68\t2\n69\t6\n70\t7\n71\t6\n72\t4\n73\t6\n74\t3\n75\t6\n76\t2\n77\t6\n78\t3\n79\t4\n80\t6\n81\t1\n83\t4\n84\t1\n86\t1\n87\t1\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d23"
            },
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d24"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754139780919_383542627",
      "id": "paragraph_1754139780919_383542627",
      "dateCreated": "2025-08-02 22:03:00.925",
      "dateStarted": "2025-08-02 22:24:41.267",
      "dateFinished": "2025-08-02 22:24:42.400",
      "status": "FINISHED"
    },
    {
      "title": "Step 3: Basic Aggregation - Customers by Job Title",
      "text": "%sql\n-- Use GROUP BY and COUNT to summarize the number of customers for each job.\nSELECT\n  job,\n  count(*) AS customer_count\nFROM bank\nGROUP BY job\nORDER BY customer_count DESC",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:22:22.982",
      "progress": 0,
      "config": {
        "colWidth": 4.0,
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {},
              "keys": [
                {
                  "name": "job",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "customer_count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "job\tcustomer_count\nmanagement\t969\nblue-collar\t946\ntechnician\t768\nadmin.\t478\nservices\t417\nretired\t230\nself-employed\t183\nentrepreneur\t168\nunemployed\t128\nhousemaid\t112\nstudent\t84\nunknown\t38\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d16"
            },
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d17"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754139844359_97031208",
      "id": "paragraph_1754139844359_97031208",
      "dateCreated": "2025-08-02 22:04:04.361",
      "dateStarted": "2025-08-02 22:22:20.888",
      "dateFinished": "2025-08-02 22:22:21.986",
      "status": "FINISHED"
    },
    {
      "title": "Step 4: Filtering - Job Distribution of High-Balance Customers",
      "text": "%sql\n-- Use the WHERE clause to count customers whose balance is over 5000.\nSELECT\n  job,\n  count(*) AS customer_count\nFROM bank\nWHERE balance \u003e 5000\nGROUP BY job\nORDER BY customer_count DESC",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:22:27.122",
      "progress": 0,
      "config": {
        "colWidth": 4.0,
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "forceY": false,
                  "lineWithFocus": false,
                  "isDateFormat": false,
                  "dateFormat": ""
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "style": "stack"
                },
                "scatterChart": {}
              },
              "keys": [
                {
                  "name": "job",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "customer_count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "job\tcustomer_count\nmanagement\t94\ntechnician\t53\nblue-collar\t44\nretired\t27\nadmin.\t19\nservices\t19\nhousemaid\t13\nself-employed\t12\nentrepreneur\t12\nstudent\t9\nunemployed\t4\nunknown\t3\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d18"
            },
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d19"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754139816019_520615699",
      "id": "paragraph_1754139816019_520615699",
      "dateCreated": "2025-08-02 22:03:36.024",
      "dateStarted": "2025-08-02 22:22:24.440",
      "dateFinished": "2025-08-02 22:22:25.447",
      "status": "FINISHED"
    },
    {
      "title": "Step 4-1: Create a Helper Table for Joining",
      "text": "// Create a small lookup DataFrame for job descriptions.\nval jobDescriptions \u003d Seq(\n  (\"management\", \"Management\"),\n  (\"technician\", \"Technician\"),\n  (\"blue-collar\", \"Blue Collar\"),\n  (\"admin.\", \"Administrator\"),\n  (\"services\", \"Services\"),\n  (\"retired\", \"Retired\"),\n  (\"self-employed\", \"Self-Employed\"),\n  (\"entrepreneur\", \"Entrepreneur\"),\n  (\"student\", \"Student\"),\n  (\"housemaid\", \"Housemaid\"),S\n  (\"unemployed\", \"Unemployed\")\n).toDF(\"job_code\", \"job_description\")\n\n// Register this DataFrame as a temporary view to be used in SQL.\njobDescriptions.createOrReplaceTempView(\"job_descriptions\")\n\nprintln(\"View \u0027job_descriptions\u0027 is now ready to be used.\")",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:26:09.017",
      "progress": 0,
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "View \u0027job_descriptions\u0027 is now ready to be used.\n\u001b[1m\u001b[34mjobDescriptions\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [job_code: string, job_description: string]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754140883440_1217342289",
      "id": "paragraph_1754140883440_1217342289",
      "dateCreated": "2025-08-02 22:21:23.445",
      "dateStarted": "2025-08-02 22:22:32.495",
      "dateFinished": "2025-08-02 22:22:33.242",
      "status": "FINISHED"
    },
    {
      "title": "Step 4-2: Join and Aggregate for a Readable Report",
      "text": "%sql\n-- Join the bank data with our new descriptions to get clean job titles.\n-- Then, calculate the average balance for each job.\nSELECT\n  jd.job_description,\n  round(avg(b.balance)) AS average_balance\nFROM bank b\nJOIN job_descriptions jd ON b.job \u003d jd.job_code\nGROUP BY jd.job_description\nORDER BY average_balance DESC",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:26:36.831",
      "progress": 100,
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "forceY": false,
                  "lineWithFocus": false,
                  "isDateFormat": false,
                  "dateFormat": ""
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "style": "stack"
                },
                "scatterChart": {}
              },
              "keys": [
                {
                  "name": "job_description",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "average_balance",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "job_description\taverage_balance\nRetired\t2319.0\nHousemaid\t2084.0\nManagement\t1767.0\nEntrepreneur\t1645.0\nStudent\t1544.0\nSelf-Employed\t1392.0\nTechnician\t1331.0\nAdministrator\t1227.0\nServices\t1104.0\nUnemployed\t1089.0\nBlue Collar\t1085.0\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d20"
            },
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d21"
            },
            {
              "jobUrl": "http://192.168.45.161:4040/jobs/job?id\u003d22"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1754140899848_775309137",
      "id": "paragraph_1754140899848_775309137",
      "dateCreated": "2025-08-02 22:21:39.849",
      "dateStarted": "2025-08-02 22:22:36.259",
      "dateFinished": "2025-08-02 22:22:38.092",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Congratulations, it\u0027s done.\n##### You can create your own notebook in \u0027Notebook\u0027 menu. Good luck!",
      "user": "anonymous",
      "dateUpdated": "2025-08-02 22:03:32.241",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "tableHide": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCongratulations, it\u0026rsquo;s done.\u003c/h2\u003e\n\u003ch5\u003eYou can create your own notebook in \u0026lsquo;Notebook\u0026rsquo; menu. Good luck!\u003c/h5\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1423836268492_216498320",
      "id": "20150213-230428_1231780373",
      "dateCreated": "2015-02-13 23:04:28.000",
      "dateStarted": "2021-07-26 04:36:16.302",
      "dateFinished": "2021-07-26 04:36:16.308",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\nAbout bank data\n\n```\nCitation Request:\n  This dataset is public available for research. The details are described in [Moro et al., 2011]. \n  Please include this citation if you plan to use this database:\n\n  [Moro et al., 2011] S. Moro, R. Laureano and P. Cortez. Using Data Mining for Bank Direct Marketing: An Application of the CRISP-DM Methodology. \n  In P. Novais et al. (Eds.), Proceedings of the European Simulation and Modelling Conference - ESM\u00272011, pp. 117-121, Guimarães, Portugal, October, 2011. EUROSIS.\n\n  Available at: [pdf] http://hdl.handle.net/1822/14838\n                [bib] http://www3.dsi.uminho.pt/pcortez/bib/2011-esm-1.txt\n```",
      "user": "anonymous",
      "dateUpdated": "2021-07-26 04:36:16.402",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        ],
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "tableHide": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAbout bank data\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCitation Request:\n  This dataset is public available for research. The details are described in [Moro et al., 2011]. \n  Please include this citation if you plan to use this database:\n\n  [Moro et al., 2011] S. Moro, R. Laureano and P. Cortez. Using Data Mining for Bank Direct Marketing: An Application of the CRISP-DM Methodology. \n  In P. Novais et al. (Eds.), Proceedings of the European Simulation and Modelling Conference - ESM\u00272011, pp. 117-121, Guimarães, Portugal, October, 2011. EUROSIS.\n\n  Available at: [pdf] http://hdl.handle.net/1822/14838\n                [bib] http://www3.dsi.uminho.pt/pcortez/bib/2011-esm-1.txt\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1427420818407_872443482",
      "id": "20150326-214658_12335843",
      "dateCreated": "2015-03-26 21:46:58.000",
      "dateStarted": "2021-07-26 04:36:16.404",
      "dateFinished": "2021-07-26 04:36:16.413",
      "status": "FINISHED"
    }
  ],
  "name": "2. Spark Basic Features",
  "id": "2A94M5J1Z",
  "defaultInterpreterGroup": "spark",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "looknfeel": "default",
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}