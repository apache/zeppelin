/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.zeppelin.interpreter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-03")
public class RemoteInterpreterProgress implements org.apache.thrift.TBase<RemoteInterpreterProgress, RemoteInterpreterProgress._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterProgress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterProgress");

  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROGRESS_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("progressLog", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RemoteInterpreterProgressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RemoteInterpreterProgressTupleSchemeFactory());
  }

  public int progress; // required
  public String progressLog; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROGRESS((short)1, "progress"),
    PROGRESS_LOG((short)2, "progressLog");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROGRESS
          return PROGRESS;
        case 2: // PROGRESS_LOG
          return PROGRESS_LOG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRESS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROGRESS_LOG, new org.apache.thrift.meta_data.FieldMetaData("progressLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoteInterpreterProgress.class, metaDataMap);
  }

  public RemoteInterpreterProgress() {
  }

  public RemoteInterpreterProgress(
    int progress,
    String progressLog)
  {
    this();
    this.progress = progress;
    setProgressIsSet(true);
    this.progressLog = progressLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemoteInterpreterProgress(RemoteInterpreterProgress other) {
    __isset_bitfield = other.__isset_bitfield;
    this.progress = other.progress;
    if (other.isSetProgressLog()) {
      this.progressLog = other.progressLog;
    }
  }

  public RemoteInterpreterProgress deepCopy() {
    return new RemoteInterpreterProgress(this);
  }

  @Override
  public void clear() {
    setProgressIsSet(false);
    this.progress = 0;
    this.progressLog = null;
  }

  public int getProgress() {
    return this.progress;
  }

  public RemoteInterpreterProgress setProgress(int progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESS_ISSET_ID, value);
  }

  public String getProgressLog() {
    return this.progressLog;
  }

  public RemoteInterpreterProgress setProgressLog(String progressLog) {
    this.progressLog = progressLog;
    return this;
  }

  public void unsetProgressLog() {
    this.progressLog = null;
  }

  /** Returns true if field progressLog is set (has been assigned a value) and false otherwise */
  public boolean isSetProgressLog() {
    return this.progressLog != null;
  }

  public void setProgressLogIsSet(boolean value) {
    if (!value) {
      this.progressLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Integer)value);
      }
      break;

    case PROGRESS_LOG:
      if (value == null) {
        unsetProgressLog();
      } else {
        setProgressLog((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROGRESS:
      return getProgress();

    case PROGRESS_LOG:
      return getProgressLog();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROGRESS:
      return isSetProgress();
    case PROGRESS_LOG:
      return isSetProgressLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RemoteInterpreterProgress)
      return this.equals((RemoteInterpreterProgress)that);
    return false;
  }

  public boolean equals(RemoteInterpreterProgress that) {
    if (that == null)
      return false;

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_progressLog = true && this.isSetProgressLog();
    boolean that_present_progressLog = true && that.isSetProgressLog();
    if (this_present_progressLog || that_present_progressLog) {
      if (!(this_present_progressLog && that_present_progressLog))
        return false;
      if (!this.progressLog.equals(that.progressLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_progress = true;
    list.add(present_progress);
    if (present_progress)
      list.add(progress);

    boolean present_progressLog = true && (isSetProgressLog());
    list.add(present_progressLog);
    if (present_progressLog)
      list.add(progressLog);

    return list.hashCode();
  }

  @Override
  public int compareTo(RemoteInterpreterProgress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgressLog()).compareTo(other.isSetProgressLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgressLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progressLog, other.progressLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RemoteInterpreterProgress(");
    boolean first = true;

    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("progressLog:");
    if (this.progressLog == null) {
      sb.append("null");
    } else {
      sb.append(this.progressLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RemoteInterpreterProgressStandardSchemeFactory implements SchemeFactory {
    public RemoteInterpreterProgressStandardScheme getScheme() {
      return new RemoteInterpreterProgressStandardScheme();
    }
  }

  private static class RemoteInterpreterProgressStandardScheme extends StandardScheme<RemoteInterpreterProgress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RemoteInterpreterProgress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.progress = iprot.readI32();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROGRESS_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.progressLog = iprot.readString();
              struct.setProgressLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RemoteInterpreterProgress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
      oprot.writeI32(struct.progress);
      oprot.writeFieldEnd();
      if (struct.progressLog != null) {
        oprot.writeFieldBegin(PROGRESS_LOG_FIELD_DESC);
        oprot.writeString(struct.progressLog);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RemoteInterpreterProgressTupleSchemeFactory implements SchemeFactory {
    public RemoteInterpreterProgressTupleScheme getScheme() {
      return new RemoteInterpreterProgressTupleScheme();
    }
  }

  private static class RemoteInterpreterProgressTupleScheme extends TupleScheme<RemoteInterpreterProgress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RemoteInterpreterProgress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProgress()) {
        optionals.set(0);
      }
      if (struct.isSetProgressLog()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetProgress()) {
        oprot.writeI32(struct.progress);
      }
      if (struct.isSetProgressLog()) {
        oprot.writeString(struct.progressLog);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RemoteInterpreterProgress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.progress = iprot.readI32();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.progressLog = iprot.readString();
        struct.setProgressLogIsSet(true);
      }
    }
  }

}

