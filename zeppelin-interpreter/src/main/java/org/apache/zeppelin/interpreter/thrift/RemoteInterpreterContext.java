/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.zeppelin.interpreter.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");

  private static final org.apache.thrift.protocol.TField NOTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("noteId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NOTE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("noteName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAGRAPH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paragraphId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REPL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("replName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARAGRAPH_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("paragraphTitle", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PARAGRAPH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("paragraphText", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AUTHENTICATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("authenticationInfo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GUI_FIELD_DESC = new org.apache.thrift.protocol.TField("gui", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NOTE_GUI_FIELD_DESC = new org.apache.thrift.protocol.TField("noteGui", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LOCAL_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("localProperties", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RemoteInterpreterContextStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RemoteInterpreterContextTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String noteId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String noteName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String paragraphId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String replName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String paragraphTitle; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String paragraphText; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String authenticationInfo; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String config; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String gui; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String noteGui; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> localProperties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTE_ID((short)1, "noteId"),
    NOTE_NAME((short)2, "noteName"),
    PARAGRAPH_ID((short)3, "paragraphId"),
    REPL_NAME((short)4, "replName"),
    PARAGRAPH_TITLE((short)5, "paragraphTitle"),
    PARAGRAPH_TEXT((short)6, "paragraphText"),
    AUTHENTICATION_INFO((short)7, "authenticationInfo"),
    CONFIG((short)8, "config"),
    GUI((short)9, "gui"),
    NOTE_GUI((short)10, "noteGui"),
    LOCAL_PROPERTIES((short)11, "localProperties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTE_ID
          return NOTE_ID;
        case 2: // NOTE_NAME
          return NOTE_NAME;
        case 3: // PARAGRAPH_ID
          return PARAGRAPH_ID;
        case 4: // REPL_NAME
          return REPL_NAME;
        case 5: // PARAGRAPH_TITLE
          return PARAGRAPH_TITLE;
        case 6: // PARAGRAPH_TEXT
          return PARAGRAPH_TEXT;
        case 7: // AUTHENTICATION_INFO
          return AUTHENTICATION_INFO;
        case 8: // CONFIG
          return CONFIG;
        case 9: // GUI
          return GUI;
        case 10: // NOTE_GUI
          return NOTE_GUI;
        case 11: // LOCAL_PROPERTIES
          return LOCAL_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTE_ID, new org.apache.thrift.meta_data.FieldMetaData("noteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE_NAME, new org.apache.thrift.meta_data.FieldMetaData("noteName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAGRAPH_ID, new org.apache.thrift.meta_data.FieldMetaData("paragraphId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPL_NAME, new org.apache.thrift.meta_data.FieldMetaData("replName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAGRAPH_TITLE, new org.apache.thrift.meta_data.FieldMetaData("paragraphTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAGRAPH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("paragraphText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHENTICATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("authenticationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUI, new org.apache.thrift.meta_data.FieldMetaData("gui", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE_GUI, new org.apache.thrift.meta_data.FieldMetaData("noteGui", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("localProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoteInterpreterContext.class, metaDataMap);
  }

  public RemoteInterpreterContext() {
  }

  public RemoteInterpreterContext(
    java.lang.String noteId,
    java.lang.String noteName,
    java.lang.String paragraphId,
    java.lang.String replName,
    java.lang.String paragraphTitle,
    java.lang.String paragraphText,
    java.lang.String authenticationInfo,
    java.lang.String config,
    java.lang.String gui,
    java.lang.String noteGui,
    java.util.Map<java.lang.String,java.lang.String> localProperties)
  {
    this();
    this.noteId = noteId;
    this.noteName = noteName;
    this.paragraphId = paragraphId;
    this.replName = replName;
    this.paragraphTitle = paragraphTitle;
    this.paragraphText = paragraphText;
    this.authenticationInfo = authenticationInfo;
    this.config = config;
    this.gui = gui;
    this.noteGui = noteGui;
    this.localProperties = localProperties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemoteInterpreterContext(RemoteInterpreterContext other) {
    if (other.isSetNoteId()) {
      this.noteId = other.noteId;
    }
    if (other.isSetNoteName()) {
      this.noteName = other.noteName;
    }
    if (other.isSetParagraphId()) {
      this.paragraphId = other.paragraphId;
    }
    if (other.isSetReplName()) {
      this.replName = other.replName;
    }
    if (other.isSetParagraphTitle()) {
      this.paragraphTitle = other.paragraphTitle;
    }
    if (other.isSetParagraphText()) {
      this.paragraphText = other.paragraphText;
    }
    if (other.isSetAuthenticationInfo()) {
      this.authenticationInfo = other.authenticationInfo;
    }
    if (other.isSetConfig()) {
      this.config = other.config;
    }
    if (other.isSetGui()) {
      this.gui = other.gui;
    }
    if (other.isSetNoteGui()) {
      this.noteGui = other.noteGui;
    }
    if (other.isSetLocalProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__localProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.localProperties);
      this.localProperties = __this__localProperties;
    }
  }

  public RemoteInterpreterContext deepCopy() {
    return new RemoteInterpreterContext(this);
  }

  @Override
  public void clear() {
    this.noteId = null;
    this.noteName = null;
    this.paragraphId = null;
    this.replName = null;
    this.paragraphTitle = null;
    this.paragraphText = null;
    this.authenticationInfo = null;
    this.config = null;
    this.gui = null;
    this.noteGui = null;
    this.localProperties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNoteId() {
    return this.noteId;
  }

  public RemoteInterpreterContext setNoteId(@org.apache.thrift.annotation.Nullable java.lang.String noteId) {
    this.noteId = noteId;
    return this;
  }

  public void unsetNoteId() {
    this.noteId = null;
  }

  /** Returns true if field noteId is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteId() {
    return this.noteId != null;
  }

  public void setNoteIdIsSet(boolean value) {
    if (!value) {
      this.noteId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNoteName() {
    return this.noteName;
  }

  public RemoteInterpreterContext setNoteName(@org.apache.thrift.annotation.Nullable java.lang.String noteName) {
    this.noteName = noteName;
    return this;
  }

  public void unsetNoteName() {
    this.noteName = null;
  }

  /** Returns true if field noteName is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteName() {
    return this.noteName != null;
  }

  public void setNoteNameIsSet(boolean value) {
    if (!value) {
      this.noteName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParagraphId() {
    return this.paragraphId;
  }

  public RemoteInterpreterContext setParagraphId(@org.apache.thrift.annotation.Nullable java.lang.String paragraphId) {
    this.paragraphId = paragraphId;
    return this;
  }

  public void unsetParagraphId() {
    this.paragraphId = null;
  }

  /** Returns true if field paragraphId is set (has been assigned a value) and false otherwise */
  public boolean isSetParagraphId() {
    return this.paragraphId != null;
  }

  public void setParagraphIdIsSet(boolean value) {
    if (!value) {
      this.paragraphId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReplName() {
    return this.replName;
  }

  public RemoteInterpreterContext setReplName(@org.apache.thrift.annotation.Nullable java.lang.String replName) {
    this.replName = replName;
    return this;
  }

  public void unsetReplName() {
    this.replName = null;
  }

  /** Returns true if field replName is set (has been assigned a value) and false otherwise */
  public boolean isSetReplName() {
    return this.replName != null;
  }

  public void setReplNameIsSet(boolean value) {
    if (!value) {
      this.replName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParagraphTitle() {
    return this.paragraphTitle;
  }

  public RemoteInterpreterContext setParagraphTitle(@org.apache.thrift.annotation.Nullable java.lang.String paragraphTitle) {
    this.paragraphTitle = paragraphTitle;
    return this;
  }

  public void unsetParagraphTitle() {
    this.paragraphTitle = null;
  }

  /** Returns true if field paragraphTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetParagraphTitle() {
    return this.paragraphTitle != null;
  }

  public void setParagraphTitleIsSet(boolean value) {
    if (!value) {
      this.paragraphTitle = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParagraphText() {
    return this.paragraphText;
  }

  public RemoteInterpreterContext setParagraphText(@org.apache.thrift.annotation.Nullable java.lang.String paragraphText) {
    this.paragraphText = paragraphText;
    return this;
  }

  public void unsetParagraphText() {
    this.paragraphText = null;
  }

  /** Returns true if field paragraphText is set (has been assigned a value) and false otherwise */
  public boolean isSetParagraphText() {
    return this.paragraphText != null;
  }

  public void setParagraphTextIsSet(boolean value) {
    if (!value) {
      this.paragraphText = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthenticationInfo() {
    return this.authenticationInfo;
  }

  public RemoteInterpreterContext setAuthenticationInfo(@org.apache.thrift.annotation.Nullable java.lang.String authenticationInfo) {
    this.authenticationInfo = authenticationInfo;
    return this;
  }

  public void unsetAuthenticationInfo() {
    this.authenticationInfo = null;
  }

  /** Returns true if field authenticationInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthenticationInfo() {
    return this.authenticationInfo != null;
  }

  public void setAuthenticationInfoIsSet(boolean value) {
    if (!value) {
      this.authenticationInfo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConfig() {
    return this.config;
  }

  public RemoteInterpreterContext setConfig(@org.apache.thrift.annotation.Nullable java.lang.String config) {
    this.config = config;
    return this;
  }

  public void unsetConfig() {
    this.config = null;
  }

  /** Returns true if field config is set (has been assigned a value) and false otherwise */
  public boolean isSetConfig() {
    return this.config != null;
  }

  public void setConfigIsSet(boolean value) {
    if (!value) {
      this.config = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGui() {
    return this.gui;
  }

  public RemoteInterpreterContext setGui(@org.apache.thrift.annotation.Nullable java.lang.String gui) {
    this.gui = gui;
    return this;
  }

  public void unsetGui() {
    this.gui = null;
  }

  /** Returns true if field gui is set (has been assigned a value) and false otherwise */
  public boolean isSetGui() {
    return this.gui != null;
  }

  public void setGuiIsSet(boolean value) {
    if (!value) {
      this.gui = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNoteGui() {
    return this.noteGui;
  }

  public RemoteInterpreterContext setNoteGui(@org.apache.thrift.annotation.Nullable java.lang.String noteGui) {
    this.noteGui = noteGui;
    return this;
  }

  public void unsetNoteGui() {
    this.noteGui = null;
  }

  /** Returns true if field noteGui is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteGui() {
    return this.noteGui != null;
  }

  public void setNoteGuiIsSet(boolean value) {
    if (!value) {
      this.noteGui = null;
    }
  }

  public int getLocalPropertiesSize() {
    return (this.localProperties == null) ? 0 : this.localProperties.size();
  }

  public void putToLocalProperties(java.lang.String key, java.lang.String val) {
    if (this.localProperties == null) {
      this.localProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.localProperties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getLocalProperties() {
    return this.localProperties;
  }

  public RemoteInterpreterContext setLocalProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> localProperties) {
    this.localProperties = localProperties;
    return this;
  }

  public void unsetLocalProperties() {
    this.localProperties = null;
  }

  /** Returns true if field localProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalProperties() {
    return this.localProperties != null;
  }

  public void setLocalPropertiesIsSet(boolean value) {
    if (!value) {
      this.localProperties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NOTE_ID:
      if (value == null) {
        unsetNoteId();
      } else {
        setNoteId((java.lang.String)value);
      }
      break;

    case NOTE_NAME:
      if (value == null) {
        unsetNoteName();
      } else {
        setNoteName((java.lang.String)value);
      }
      break;

    case PARAGRAPH_ID:
      if (value == null) {
        unsetParagraphId();
      } else {
        setParagraphId((java.lang.String)value);
      }
      break;

    case REPL_NAME:
      if (value == null) {
        unsetReplName();
      } else {
        setReplName((java.lang.String)value);
      }
      break;

    case PARAGRAPH_TITLE:
      if (value == null) {
        unsetParagraphTitle();
      } else {
        setParagraphTitle((java.lang.String)value);
      }
      break;

    case PARAGRAPH_TEXT:
      if (value == null) {
        unsetParagraphText();
      } else {
        setParagraphText((java.lang.String)value);
      }
      break;

    case AUTHENTICATION_INFO:
      if (value == null) {
        unsetAuthenticationInfo();
      } else {
        setAuthenticationInfo((java.lang.String)value);
      }
      break;

    case CONFIG:
      if (value == null) {
        unsetConfig();
      } else {
        setConfig((java.lang.String)value);
      }
      break;

    case GUI:
      if (value == null) {
        unsetGui();
      } else {
        setGui((java.lang.String)value);
      }
      break;

    case NOTE_GUI:
      if (value == null) {
        unsetNoteGui();
      } else {
        setNoteGui((java.lang.String)value);
      }
      break;

    case LOCAL_PROPERTIES:
      if (value == null) {
        unsetLocalProperties();
      } else {
        setLocalProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTE_ID:
      return getNoteId();

    case NOTE_NAME:
      return getNoteName();

    case PARAGRAPH_ID:
      return getParagraphId();

    case REPL_NAME:
      return getReplName();

    case PARAGRAPH_TITLE:
      return getParagraphTitle();

    case PARAGRAPH_TEXT:
      return getParagraphText();

    case AUTHENTICATION_INFO:
      return getAuthenticationInfo();

    case CONFIG:
      return getConfig();

    case GUI:
      return getGui();

    case NOTE_GUI:
      return getNoteGui();

    case LOCAL_PROPERTIES:
      return getLocalProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NOTE_ID:
      return isSetNoteId();
    case NOTE_NAME:
      return isSetNoteName();
    case PARAGRAPH_ID:
      return isSetParagraphId();
    case REPL_NAME:
      return isSetReplName();
    case PARAGRAPH_TITLE:
      return isSetParagraphTitle();
    case PARAGRAPH_TEXT:
      return isSetParagraphText();
    case AUTHENTICATION_INFO:
      return isSetAuthenticationInfo();
    case CONFIG:
      return isSetConfig();
    case GUI:
      return isSetGui();
    case NOTE_GUI:
      return isSetNoteGui();
    case LOCAL_PROPERTIES:
      return isSetLocalProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RemoteInterpreterContext)
      return this.equals((RemoteInterpreterContext)that);
    return false;
  }

  public boolean equals(RemoteInterpreterContext that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_noteId = true && this.isSetNoteId();
    boolean that_present_noteId = true && that.isSetNoteId();
    if (this_present_noteId || that_present_noteId) {
      if (!(this_present_noteId && that_present_noteId))
        return false;
      if (!this.noteId.equals(that.noteId))
        return false;
    }

    boolean this_present_noteName = true && this.isSetNoteName();
    boolean that_present_noteName = true && that.isSetNoteName();
    if (this_present_noteName || that_present_noteName) {
      if (!(this_present_noteName && that_present_noteName))
        return false;
      if (!this.noteName.equals(that.noteName))
        return false;
    }

    boolean this_present_paragraphId = true && this.isSetParagraphId();
    boolean that_present_paragraphId = true && that.isSetParagraphId();
    if (this_present_paragraphId || that_present_paragraphId) {
      if (!(this_present_paragraphId && that_present_paragraphId))
        return false;
      if (!this.paragraphId.equals(that.paragraphId))
        return false;
    }

    boolean this_present_replName = true && this.isSetReplName();
    boolean that_present_replName = true && that.isSetReplName();
    if (this_present_replName || that_present_replName) {
      if (!(this_present_replName && that_present_replName))
        return false;
      if (!this.replName.equals(that.replName))
        return false;
    }

    boolean this_present_paragraphTitle = true && this.isSetParagraphTitle();
    boolean that_present_paragraphTitle = true && that.isSetParagraphTitle();
    if (this_present_paragraphTitle || that_present_paragraphTitle) {
      if (!(this_present_paragraphTitle && that_present_paragraphTitle))
        return false;
      if (!this.paragraphTitle.equals(that.paragraphTitle))
        return false;
    }

    boolean this_present_paragraphText = true && this.isSetParagraphText();
    boolean that_present_paragraphText = true && that.isSetParagraphText();
    if (this_present_paragraphText || that_present_paragraphText) {
      if (!(this_present_paragraphText && that_present_paragraphText))
        return false;
      if (!this.paragraphText.equals(that.paragraphText))
        return false;
    }

    boolean this_present_authenticationInfo = true && this.isSetAuthenticationInfo();
    boolean that_present_authenticationInfo = true && that.isSetAuthenticationInfo();
    if (this_present_authenticationInfo || that_present_authenticationInfo) {
      if (!(this_present_authenticationInfo && that_present_authenticationInfo))
        return false;
      if (!this.authenticationInfo.equals(that.authenticationInfo))
        return false;
    }

    boolean this_present_config = true && this.isSetConfig();
    boolean that_present_config = true && that.isSetConfig();
    if (this_present_config || that_present_config) {
      if (!(this_present_config && that_present_config))
        return false;
      if (!this.config.equals(that.config))
        return false;
    }

    boolean this_present_gui = true && this.isSetGui();
    boolean that_present_gui = true && that.isSetGui();
    if (this_present_gui || that_present_gui) {
      if (!(this_present_gui && that_present_gui))
        return false;
      if (!this.gui.equals(that.gui))
        return false;
    }

    boolean this_present_noteGui = true && this.isSetNoteGui();
    boolean that_present_noteGui = true && that.isSetNoteGui();
    if (this_present_noteGui || that_present_noteGui) {
      if (!(this_present_noteGui && that_present_noteGui))
        return false;
      if (!this.noteGui.equals(that.noteGui))
        return false;
    }

    boolean this_present_localProperties = true && this.isSetLocalProperties();
    boolean that_present_localProperties = true && that.isSetLocalProperties();
    if (this_present_localProperties || that_present_localProperties) {
      if (!(this_present_localProperties && that_present_localProperties))
        return false;
      if (!this.localProperties.equals(that.localProperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNoteId()) ? 131071 : 524287);
    if (isSetNoteId())
      hashCode = hashCode * 8191 + noteId.hashCode();

    hashCode = hashCode * 8191 + ((isSetNoteName()) ? 131071 : 524287);
    if (isSetNoteName())
      hashCode = hashCode * 8191 + noteName.hashCode();

    hashCode = hashCode * 8191 + ((isSetParagraphId()) ? 131071 : 524287);
    if (isSetParagraphId())
      hashCode = hashCode * 8191 + paragraphId.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplName()) ? 131071 : 524287);
    if (isSetReplName())
      hashCode = hashCode * 8191 + replName.hashCode();

    hashCode = hashCode * 8191 + ((isSetParagraphTitle()) ? 131071 : 524287);
    if (isSetParagraphTitle())
      hashCode = hashCode * 8191 + paragraphTitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetParagraphText()) ? 131071 : 524287);
    if (isSetParagraphText())
      hashCode = hashCode * 8191 + paragraphText.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthenticationInfo()) ? 131071 : 524287);
    if (isSetAuthenticationInfo())
      hashCode = hashCode * 8191 + authenticationInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfig()) ? 131071 : 524287);
    if (isSetConfig())
      hashCode = hashCode * 8191 + config.hashCode();

    hashCode = hashCode * 8191 + ((isSetGui()) ? 131071 : 524287);
    if (isSetGui())
      hashCode = hashCode * 8191 + gui.hashCode();

    hashCode = hashCode * 8191 + ((isSetNoteGui()) ? 131071 : 524287);
    if (isSetNoteGui())
      hashCode = hashCode * 8191 + noteGui.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocalProperties()) ? 131071 : 524287);
    if (isSetLocalProperties())
      hashCode = hashCode * 8191 + localProperties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RemoteInterpreterContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNoteId()).compareTo(other.isSetNoteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteId, other.noteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNoteName()).compareTo(other.isSetNoteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteName, other.noteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParagraphId()).compareTo(other.isSetParagraphId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParagraphId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paragraphId, other.paragraphId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReplName()).compareTo(other.isSetReplName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replName, other.replName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParagraphTitle()).compareTo(other.isSetParagraphTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParagraphTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paragraphTitle, other.paragraphTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParagraphText()).compareTo(other.isSetParagraphText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParagraphText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paragraphText, other.paragraphText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthenticationInfo()).compareTo(other.isSetAuthenticationInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthenticationInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authenticationInfo, other.authenticationInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGui()).compareTo(other.isSetGui());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGui()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gui, other.gui);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNoteGui()).compareTo(other.isSetNoteGui());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteGui()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteGui, other.noteGui);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocalProperties()).compareTo(other.isSetLocalProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localProperties, other.localProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RemoteInterpreterContext(");
    boolean first = true;

    sb.append("noteId:");
    if (this.noteId == null) {
      sb.append("null");
    } else {
      sb.append(this.noteId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteName:");
    if (this.noteName == null) {
      sb.append("null");
    } else {
      sb.append(this.noteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paragraphId:");
    if (this.paragraphId == null) {
      sb.append("null");
    } else {
      sb.append(this.paragraphId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replName:");
    if (this.replName == null) {
      sb.append("null");
    } else {
      sb.append(this.replName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paragraphTitle:");
    if (this.paragraphTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.paragraphTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paragraphText:");
    if (this.paragraphText == null) {
      sb.append("null");
    } else {
      sb.append(this.paragraphText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authenticationInfo:");
    if (this.authenticationInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.authenticationInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("config:");
    if (this.config == null) {
      sb.append("null");
    } else {
      sb.append(this.config);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gui:");
    if (this.gui == null) {
      sb.append("null");
    } else {
      sb.append(this.gui);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteGui:");
    if (this.noteGui == null) {
      sb.append("null");
    } else {
      sb.append(this.noteGui);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localProperties:");
    if (this.localProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.localProperties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RemoteInterpreterContextStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RemoteInterpreterContextStandardScheme getScheme() {
      return new RemoteInterpreterContextStandardScheme();
    }
  }

  private static class RemoteInterpreterContextStandardScheme extends org.apache.thrift.scheme.StandardScheme<RemoteInterpreterContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RemoteInterpreterContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noteId = iprot.readString();
              struct.setNoteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOTE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noteName = iprot.readString();
              struct.setNoteNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAGRAPH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paragraphId = iprot.readString();
              struct.setParagraphIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replName = iprot.readString();
              struct.setReplNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAGRAPH_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paragraphTitle = iprot.readString();
              struct.setParagraphTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARAGRAPH_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paragraphText = iprot.readString();
              struct.setParagraphTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AUTHENTICATION_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authenticationInfo = iprot.readString();
              struct.setAuthenticationInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.config = iprot.readString();
              struct.setConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GUI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gui = iprot.readString();
              struct.setGuiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOTE_GUI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noteGui = iprot.readString();
              struct.setNoteGuiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOCAL_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.localProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.localProperties.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setLocalPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RemoteInterpreterContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.noteId != null) {
        oprot.writeFieldBegin(NOTE_ID_FIELD_DESC);
        oprot.writeString(struct.noteId);
        oprot.writeFieldEnd();
      }
      if (struct.noteName != null) {
        oprot.writeFieldBegin(NOTE_NAME_FIELD_DESC);
        oprot.writeString(struct.noteName);
        oprot.writeFieldEnd();
      }
      if (struct.paragraphId != null) {
        oprot.writeFieldBegin(PARAGRAPH_ID_FIELD_DESC);
        oprot.writeString(struct.paragraphId);
        oprot.writeFieldEnd();
      }
      if (struct.replName != null) {
        oprot.writeFieldBegin(REPL_NAME_FIELD_DESC);
        oprot.writeString(struct.replName);
        oprot.writeFieldEnd();
      }
      if (struct.paragraphTitle != null) {
        oprot.writeFieldBegin(PARAGRAPH_TITLE_FIELD_DESC);
        oprot.writeString(struct.paragraphTitle);
        oprot.writeFieldEnd();
      }
      if (struct.paragraphText != null) {
        oprot.writeFieldBegin(PARAGRAPH_TEXT_FIELD_DESC);
        oprot.writeString(struct.paragraphText);
        oprot.writeFieldEnd();
      }
      if (struct.authenticationInfo != null) {
        oprot.writeFieldBegin(AUTHENTICATION_INFO_FIELD_DESC);
        oprot.writeString(struct.authenticationInfo);
        oprot.writeFieldEnd();
      }
      if (struct.config != null) {
        oprot.writeFieldBegin(CONFIG_FIELD_DESC);
        oprot.writeString(struct.config);
        oprot.writeFieldEnd();
      }
      if (struct.gui != null) {
        oprot.writeFieldBegin(GUI_FIELD_DESC);
        oprot.writeString(struct.gui);
        oprot.writeFieldEnd();
      }
      if (struct.noteGui != null) {
        oprot.writeFieldBegin(NOTE_GUI_FIELD_DESC);
        oprot.writeString(struct.noteGui);
        oprot.writeFieldEnd();
      }
      if (struct.localProperties != null) {
        oprot.writeFieldBegin(LOCAL_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.localProperties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.localProperties.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RemoteInterpreterContextTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RemoteInterpreterContextTupleScheme getScheme() {
      return new RemoteInterpreterContextTupleScheme();
    }
  }

  private static class RemoteInterpreterContextTupleScheme extends org.apache.thrift.scheme.TupleScheme<RemoteInterpreterContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RemoteInterpreterContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNoteId()) {
        optionals.set(0);
      }
      if (struct.isSetNoteName()) {
        optionals.set(1);
      }
      if (struct.isSetParagraphId()) {
        optionals.set(2);
      }
      if (struct.isSetReplName()) {
        optionals.set(3);
      }
      if (struct.isSetParagraphTitle()) {
        optionals.set(4);
      }
      if (struct.isSetParagraphText()) {
        optionals.set(5);
      }
      if (struct.isSetAuthenticationInfo()) {
        optionals.set(6);
      }
      if (struct.isSetConfig()) {
        optionals.set(7);
      }
      if (struct.isSetGui()) {
        optionals.set(8);
      }
      if (struct.isSetNoteGui()) {
        optionals.set(9);
      }
      if (struct.isSetLocalProperties()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetNoteId()) {
        oprot.writeString(struct.noteId);
      }
      if (struct.isSetNoteName()) {
        oprot.writeString(struct.noteName);
      }
      if (struct.isSetParagraphId()) {
        oprot.writeString(struct.paragraphId);
      }
      if (struct.isSetReplName()) {
        oprot.writeString(struct.replName);
      }
      if (struct.isSetParagraphTitle()) {
        oprot.writeString(struct.paragraphTitle);
      }
      if (struct.isSetParagraphText()) {
        oprot.writeString(struct.paragraphText);
      }
      if (struct.isSetAuthenticationInfo()) {
        oprot.writeString(struct.authenticationInfo);
      }
      if (struct.isSetConfig()) {
        oprot.writeString(struct.config);
      }
      if (struct.isSetGui()) {
        oprot.writeString(struct.gui);
      }
      if (struct.isSetNoteGui()) {
        oprot.writeString(struct.noteGui);
      }
      if (struct.isSetLocalProperties()) {
        {
          oprot.writeI32(struct.localProperties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.localProperties.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RemoteInterpreterContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.noteId = iprot.readString();
        struct.setNoteIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.noteName = iprot.readString();
        struct.setNoteNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paragraphId = iprot.readString();
        struct.setParagraphIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.replName = iprot.readString();
        struct.setReplNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paragraphTitle = iprot.readString();
        struct.setParagraphTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paragraphText = iprot.readString();
        struct.setParagraphTextIsSet(true);
      }
      if (incoming.get(6)) {
        struct.authenticationInfo = iprot.readString();
        struct.setAuthenticationInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.config = iprot.readString();
        struct.setConfigIsSet(true);
      }
      if (incoming.get(8)) {
        struct.gui = iprot.readString();
        struct.setGuiIsSet(true);
      }
      if (incoming.get(9)) {
        struct.noteGui = iprot.readString();
        struct.setNoteGuiIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.localProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.localProperties.put(_key7, _val8);
          }
        }
        struct.setLocalPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

